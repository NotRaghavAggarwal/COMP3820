[{"/Users/raghavaggarwal/Desktop/team11_uq/src/index.js":"1","/Users/raghavaggarwal/Desktop/team11_uq/src/App.jsx":"2"},{"size":539,"mtime":1696554768635,"results":"3","hashOfConfig":"4"},{"size":2287,"mtime":1696554412714,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ee1f44",{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10","usedDeprecatedRules":"11"},"/Users/raghavaggarwal/Desktop/team11_uq/src/index.js",[],"/Users/raghavaggarwal/Desktop/team11_uq/src/App.jsx",["12"],"import React,{useEffect,useRef,useState} from 'react';\nimport './App.css';\nimport {PatientVisualizer} from 'fhir-visualizers';\nimport { useForm } from \"react-hook-form\";\nimport {Spinner, Container, Button, Form} from \"react-bootstrap\";\n\nexport default function App(props) {\n  const client=props.client;\n  const [patient, setPatient] = useState(null);\n  const lastReport = useRef(null);\n\n  useEffect(() => {\n    client.patient.read().then((patient) => setPatient(patient));\n    // client.request(`DiagnosticReport?patient=${client.patient.id}`)\n    client.patient.request(\"DiagnosticReport\")\n    .then(response => {\n      let studies = response.entry.map(entry => entry.resource);\n      lastReport.current = studies;\n    })\n    if (lastReport.current != null) {\n      // console.log(JSON.stringify(lastReport.current[0]));\n    }\n  });\n\n  let pat=patient?\n  <PatientVisualizer patient={patient} />\n  : <Spinner/>;\n\n  const { register, handleSubmit, formState: { errors } } = useForm();\n  const onSubmit = data => {\n    let np=patient;\n    np.name[0].given[0]=data.fname;\n    np.name[0].family=data.lname;\n    setPatient(np);\n    client.update(np);\n  };\n\n  return (\n    <div id=\"app\">\n      <Container>\n        {pat}\n      </Container>\n      {patient?\n      <Container>\n        <h4>Update Patient Name</h4>\n      <Form onSubmit={handleSubmit(onSubmit)}>\n        <Form.Group className=\"mb-3\" controlId=\"formFirst\">\n        <Form.Label>First</Form.Label>\n        <Form.Control type=\"text\" {...register(\"fname\")} defaultValue={ patient.name[0].given.join(' ')} />\n        </Form.Group>\n        <Form.Group className=\"mb-3\" controlId=\"formLast\">\n        <Form.Label>Last</Form.Label>\n        <Form.Control type=\"text\" {...register(\"lname\")} defaultValue={ patient.name[0].family } />\n        </Form.Group>\n        <Button type=\"submit\" >Update</Button>\n      </Form>\n      </Container>\n      :\"\"}\n      {/* <Container>\n        <Button type=\"button\" className=\"btn btn-primary\" onClick={getStudies}>Get Report</Button>\n      </Container> */}\n      <Container>\n        <br/>\n        <h4>Existing Report</h4>\n        {lastReport.current != null ?\n        lastReport.current.map(report =>\n          <pre>{JSON.stringify(report, null, 2)}</pre>)\n        :\"\"}\n\n      </Container>\n\n    </div>\n  );\n};\n",["13","14"],{"ruleId":"15","severity":1,"message":"16","line":29,"column":48,"nodeType":"17","messageId":"18","endLine":29,"endColumn":54},{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},"no-unused-vars","'errors' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["23"],"no-negated-in-lhs",["24"],"no-global-assign","no-unsafe-negation"]
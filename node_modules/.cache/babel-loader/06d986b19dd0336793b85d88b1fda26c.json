{"ast":null,"code":"import * as React from 'react';\nvar isCheckBoxInput = element => element.type === 'checkbox';\nvar isDateObject = data => data instanceof Date;\nvar isNullOrUndefined = value => value == null;\nconst isObjectType = value => typeof value === 'object';\nvar isObject = value => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);\nvar getControllerValue = event => isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;\nvar getNodeParentName = name => name.substring(0, name.search(/.\\d/)) || name;\nvar isNameInFieldArray = (names, name) => [...names].some(current => getNodeParentName(name) === current);\nvar compact = value => value.filter(Boolean);\nvar isUndefined = val => val === undefined;\nvar get = (obj, path, defaultValue) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n    return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n  }\n  return undefined;\n};\nconst EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change'\n};\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all'\n};\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\nvar omit = (source, key) => {\n  const copy = Object.assign({}, source);\n  delete copy[key];\n  return copy;\n};\nconst FormContext = React.createContext(null);\nFormContext.displayName = 'RHFContext';\nconst useFormContext = () => React.useContext(FormContext);\nconst FormProvider = props => React.createElement(FormContext.Provider, {\n  value: omit(props, 'children')\n}, props.children);\nvar getProxyFormState = (formState, _proxyFormState, localProxyFormState, isRoot = true) => {\n  function createGetter(prop) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n  const result = {};\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key)\n    });\n  }\n  return result;\n};\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\nvar shouldRenderFormState = (formStateData, _proxyFormState, isRoot) => {\n  const formState = omit(formStateData, 'name');\n  return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find(key => _proxyFormState[key] === (!isRoot || VALIDATION_MODE.all));\n};\nvar convertToArrayPayload = value => Array.isArray(value) ? value : [value];\nfunction useSubscribe({\n  disabled,\n  subject,\n  callback\n}) {\n  const _subscription = React.useRef(subject);\n  const _unSubscribe = React.useRef();\n  if (disabled) {\n    if (_subscription.current) {\n      _unSubscribe.current && _unSubscribe.current.unsubscribe();\n      _subscription.current = _unSubscribe.current = undefined;\n    }\n  } else {\n    if (!_subscription.current) {\n      _subscription.current = subject;\n    }\n    if (!_unSubscribe.current && _subscription.current) {\n      _unSubscribe.current = _subscription.current.subscribe({\n        next: callback\n      });\n    }\n  }\n  React.useEffect(() => () => {\n    _unSubscribe.current && _unSubscribe.current.unsubscribe();\n  }, []);\n}\nfunction useFormState(props) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    disabled,\n    name\n  } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  });\n  const _name = React.useRef(name);\n  _name.current = name;\n  useSubscribe({\n    disabled,\n    callback: formState => (!_name.current || !formState.name || convertToArrayPayload(_name.current).includes(formState.name)) && shouldRenderFormState(formState, _localProxyFormState.current) && updateFormState(Object.assign(Object.assign({}, control._formState), formState)),\n    subject: control._subjects.state\n  });\n  return getProxyFormState(formState, control._proxyFormState, _localProxyFormState.current, false);\n}\nfunction useController(props) {\n  const methods = useFormContext();\n  const {\n    name,\n    control = methods.control,\n    shouldUnregister\n  } = props;\n  const [value, setInputStateValue] = React.useState(get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)));\n  const formState = useFormState({\n    control: control || methods.control,\n    name\n  });\n  const _name = React.useRef(name);\n  _name.current = name;\n  useSubscribe({\n    subject: control._subjects.control,\n    callback: data => (!data.name || _name.current === data.name) && setInputStateValue(get(data.values, name))\n  });\n  const registerProps = control.register(name, Object.assign(Object.assign({}, props.rules), {\n    value\n  }));\n  const updateMounted = React.useCallback((name, value) => {\n    const field = get(control._fields, name);\n    if (field) {\n      field._f.mount = value;\n    }\n  }, [control]);\n  React.useEffect(() => {\n    updateMounted(name, true);\n    return () => {\n      const _shouldUnregisterField = control._shouldUnregister || shouldUnregister;\n      if (isNameInFieldArray(control._names.array, name) ? _shouldUnregisterField && !control._stateFlags.action : _shouldUnregisterField) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister, updateMounted]);\n  return {\n    field: {\n      onChange: event => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n        registerProps.onChange({\n          target: {\n            value,\n            name: name\n          },\n          type: EVENTS.CHANGE\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name\n          },\n          type: EVENTS.BLUR\n        });\n      },\n      name,\n      value,\n      ref: elm => {\n        const field = get(control._fields, name);\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: message => elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity()\n          };\n        }\n      }\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name)\n    }\n  };\n}\nconst Controller = props => props.render(useController(props));\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? Object.assign(Object.assign({}, errors[name]), {\n  types: Object.assign(Object.assign({}, errors[name] && errors[name].types ? errors[name].types : {}), {\n    [type]: message || true\n  })\n}) : {};\nvar isKey = value => /^\\w*$/.test(value);\nvar stringToPath = input => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\nconst focusFieldBy = (fields, callback, fieldsNames) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus) ? options.focusName || `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.` : '';\nvar mapCurrentIds = (values, _fieldIds, keyName) => values.map((value, index) => {\n  const output = _fieldIds.current[index];\n  return Object.assign(Object.assign({}, value), output ? {\n    [keyName]: output[keyName]\n  } : {});\n});\nvar generateId = () => {\n  const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\nvar mapIds = (values = [], keyName) => values.map(value => Object.assign(Object.assign({}, value[keyName] ? {} : {\n  [keyName]: generateId()\n}), value));\nfunction append(data, value) {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\nvar fillEmptyArray = value => Array.isArray(value) ? value.map(() => undefined) : undefined;\nfunction insert(data, index, value) {\n  return [...data.slice(0, index), ...convertToArrayPayload(value), ...data.slice(index)];\n}\nvar moveArrayAt = (data, from, to) => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n  return [];\n};\nvar omitKey = (fields, keyName) => fields.map((field = {}) => omit(field, keyName));\nfunction prepend(data, value) {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\nfunction removeAtIndexes(data, indexes) {\n  let i = 0;\n  const temp = [...data];\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n  return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index) ? [] : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\nvar swapArrayAt = (data, indexA, indexB) => {\n  data[indexA] = [data[indexB], data[indexB] = data[indexA]][0];\n};\nvar updateAt = (fieldValues, index, value) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\nconst useFieldArray = props => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id',\n    shouldUnregister\n  } = props;\n  const [fields, setFields] = React.useState(mapIds(control._getFieldArrayValue(name), keyName));\n  const _fieldIds = React.useRef(fields);\n  useSubscribe({\n    callback: ({\n      values,\n      name: fieldArrayName\n    }) => {\n      if (fieldArrayName === name || !fieldArrayName) {\n        setFields(mapIds(get(values, name), keyName));\n      }\n    },\n    subject: control._subjects.array\n  });\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n  const updateValues = React.useCallback(updatedFieldArrayValuesWithKey => {\n    const updatedFieldArrayValues = omitKey(updatedFieldArrayValuesWithKey, keyName);\n    set(control._formValues, name, updatedFieldArrayValues);\n    setFields(updatedFieldArrayValuesWithKey);\n    return updatedFieldArrayValues;\n  }, [control, name, keyName]);\n  const append$1 = (value, options) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = append(mapCurrentIds(control._getFieldArrayValue(name), _fieldIds, keyName), mapIds(appendValue, keyName));\n    control._updateFieldArray(keyName, name, append, {\n      argA: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n    control._names.focus = getFocusFieldName(name, updatedFieldArrayValuesWithKey.length - appendValue.length, options);\n  };\n  const prepend$1 = (value, options) => {\n    const updatedFieldArrayValuesWithKey = prepend(mapCurrentIds(control._getFieldArrayValue(name), _fieldIds, keyName), mapIds(convertToArrayPayload(value), keyName));\n    control._updateFieldArray(keyName, name, prepend, {\n      argA: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n  const remove = index => {\n    const updatedFieldArrayValuesWithKey = removeArrayAt(mapCurrentIds(control._getFieldArrayValue(name), _fieldIds, keyName), index);\n    control._updateFieldArray(keyName, name, removeArrayAt, {\n      argA: index\n    }, updateValues(updatedFieldArrayValuesWithKey));\n  };\n  const insert$1 = (index, value, options) => {\n    const updatedFieldArrayValuesWithKey = insert(mapCurrentIds(control._getFieldArrayValue(name), _fieldIds, keyName), index, mapIds(convertToArrayPayload(value), keyName));\n    control._updateFieldArray(keyName, name, insert, {\n      argA: index,\n      argB: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n  const swap = (indexA, indexB) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArrayValue(name), _fieldIds, keyName);\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    control._updateFieldArray(keyName, name, swapArrayAt, {\n      argA: indexA,\n      argB: indexB\n    }, updateValues(updatedFieldArrayValuesWithKey), false);\n  };\n  const move = (from, to) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArrayValue(name), _fieldIds, keyName);\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    control._updateFieldArray(keyName, name, moveArrayAt, {\n      argA: from,\n      argB: to\n    }, updateValues(updatedFieldArrayValuesWithKey), false);\n  };\n  const update = (index, value) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArrayValue(name), _fieldIds, keyName);\n    const updatedFieldArrayValues = updateAt(updatedFieldArrayValuesWithKey, index, value);\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n    control._updateFieldArray(keyName, name, updateAt, {\n      argA: index,\n      argB: value\n    }, updateValues(_fieldIds.current), true, false);\n  };\n  const replace = value => {\n    const updatedFieldArrayValuesWithKey = mapIds(convertToArrayPayload(value), keyName);\n    control._updateFieldArray(keyName, name, () => updatedFieldArrayValuesWithKey, {}, updateValues(updatedFieldArrayValuesWithKey), true, false);\n  };\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n    if (control._names.watchAll) {\n      control._subjects.state.next({});\n    } else {\n      for (const watchField of control._names.watch) {\n        if (name.startsWith(watchField)) {\n          control._subjects.state.next({});\n          break;\n        }\n      }\n    }\n    control._subjects.watch.next({\n      name,\n      values: control._formValues\n    });\n    control._names.focus && focusFieldBy(control._fields, key => key.startsWith(control._names.focus));\n    control._names.focus = '';\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n    return () => {\n      if (control._shouldUnregister || shouldUnregister) {\n        control.unregister(name);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend$1, [updateValues, name, control, keyName]),\n    append: React.useCallback(append$1, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert$1, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields\n  };\n};\nfunction cloneObject(data) {\n  let copy;\n  const isArray = Array.isArray(data);\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n  return copy;\n}\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\nfunction deepEqual(object1, object2) {\n  if (isPrimitive(object1) || isPrimitive(object2) || isDateObject(object1) || isDateObject(object2)) {\n    return object1 === object2;\n  }\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n  for (const key of keys1) {\n    const val1 = object1[key];\n    if (!keys2.includes(key)) {\n      return false;\n    }\n    if (key !== 'ref') {\n      const val2 = object2[key];\n      if ((isObject(val1) || Array.isArray(val1)) && (isObject(val2) || Array.isArray(val2)) ? !deepEqual(val1, val2) : val1 !== val2) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nvar getValidationModes = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched\n});\nvar isBoolean = value => typeof value === 'boolean';\nvar isFileInput = element => element.type === 'file';\nvar isFunction = value => typeof value === 'function';\nvar isHTMLElement = value => value instanceof HTMLElement;\nvar isMultipleSelect = element => element.type === `select-multiple`;\nvar isRadioInput = element => element.type === 'radio';\nvar isRadioOrCheckboxFunction = ref => isRadioInput(ref) || isCheckBoxInput(ref);\nvar isString = value => typeof value === 'string';\nvar isWeb = typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined' && typeof document !== 'undefined';\nvar live = ref => !isHTMLElement(ref) || !document.contains(ref);\nclass Subscription {\n  constructor() {\n    this.tearDowns = [];\n  }\n  add(tearDown) {\n    this.tearDowns.push(tearDown);\n  }\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\nclass Subscriber {\n  constructor(observer, subscription) {\n    this.observer = observer;\n    this.closed = false;\n    subscription.add(() => this.closed = true);\n  }\n  next(value) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\nclass Subject {\n  constructor() {\n    this.observers = [];\n  }\n  next(value) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n  subscribe(observer) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n    return subscription;\n  }\n  unsubscribe() {\n    this.observers = [];\n  }\n}\nfunction baseGet(object, updatePath) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n  return object;\n}\nfunction unset(object, path) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n  if (childObject) {\n    delete childObject[key];\n  }\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n    if (k > 0) {\n      previousObjRef = object;\n    }\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || Array.isArray(objectRef) && !objectRef.filter(data => isObject(data) && !isEmptyObject(data) || isBoolean(data)).length)) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n      previousObjRef = objectRef;\n    }\n  }\n  return object;\n}\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\nvar getCheckboxValue = options => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(option => option && option.checked && !option.disabled).map(option => option.value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n    return options[0].checked && !options[0].disabled ?\n    // @ts-expect-error expected to work in the browser\n    options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === '' ? validResult : {\n      value: options[0].value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n  return defaultResult;\n};\nvar getFieldValueAs = (value, {\n  valueAsNumber,\n  valueAsDate,\n  setValueAs\n}) => isUndefined(value) ? value : valueAsNumber ? value === '' ? NaN : +value : valueAsDate ? new Date(value) : setValueAs ? setValueAs(value) : value;\nvar getMultipleSelectValue = options => [...options].filter(({\n  selected\n}) => selected).map(({\n  value\n}) => value);\nconst defaultReturn = {\n  isValid: false,\n  value: null\n};\nvar getRadioValue = options => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {\n  isValid: true,\n  value: option.value\n} : previous, defaultReturn) : defaultReturn;\nfunction getFieldValue(_f) {\n  const ref = _f.ref;\n  if (_f.refs ? _f.refs.every(ref => ref.disabled) : ref.disabled) {\n    return;\n  }\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n  if (isMultipleSelect(ref)) {\n    return getMultipleSelectValue(ref.options);\n  }\n  if (isCheckBoxInput(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n  const fields = {};\n  for (const name of fieldsNames) {\n    const field = get(_fields, name);\n    field && set(fields, name, field._f);\n  }\n  return {\n    criteriaMode,\n    names: [...fieldsNames],\n    fields,\n    shouldUseNativeValidation\n  };\n};\nvar hasValidation = options => options.mount && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);\nfunction deepMerge(target, source) {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n    try {\n      target[key] = isObject(targetValue) && isObject(sourceValue) || Array.isArray(targetValue) && Array.isArray(sourceValue) ? deepMerge(targetValue, sourceValue) : sourceValue;\n    } catch (_a) {}\n  }\n  return target;\n}\nfunction setDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {\n  let index = -1;\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(values[index][key], get(defaultValues[index] || {}, key, []), dirtyFields[index][key], dirtyFields[index], key);\n      } else {\n        !isNullOrUndefined(defaultValues) && deepEqual(get(defaultValues[index] || {}, key), values[index][key]) ? set(dirtyFields[index] || {}, key) : dirtyFields[index] = Object.assign(Object.assign({}, dirtyFields[index]), {\n          [key]: true\n        });\n      }\n    }\n    parentNode && !dirtyFields.length && delete parentNode[parentName];\n  }\n  return dirtyFields;\n}\nvar setFieldArrayDirtyFields = (values, defaultValues, dirtyFields) => deepMerge(setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)), setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)));\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name, [])).length && unset(ref, name);\nvar isMessage = value => isString(value) || React.isValidElement(value);\nvar isRegex = value => value instanceof RegExp;\nfunction getValidateError(result, ref, type = 'validate') {\n  if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref\n    };\n  }\n}\nvar getValueAndMessage = validationData => isObject(validationData) && !isRegex(validationData) ? validationData : {\n  value: validationData,\n  message: ''\n};\nvar validateField = async (field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation) => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef = refs ? refs[0] : ref;\n  const setCustomValidty = message => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = (valueAsNumber || isFileInput(ref)) && !ref.value || inputValue === '' || Array.isArray(inputValue) && !inputValue.length;\n  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n  const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = Object.assign({\n      type: exceedMax ? maxType : minType,\n      message,\n      ref\n    }, appendErrorsCurry(exceedMax ? maxType : minType, message));\n  };\n  if (required && (!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {\n    const {\n      value,\n      message\n    } = isMessage(required) ? {\n      value: !!required,\n      message: required\n    } : getValueAndMessage(required);\n    if (value) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n    if (!isNaN(inputValue)) {\n      const valueNumber = ref.valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate = ref.valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name].message);\n        return error;\n      }\n    }\n  }\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > maxLengthOutput.value;\n    const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < minLengthOutput.value;\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name].message);\n        return error;\n      }\n    }\n  }\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const {\n      value: patternValue,\n      message\n    } = getValueAndMessage(pattern);\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n      if (validateError) {\n        error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {};\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n        const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\n        if (validateError) {\n          validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n          setCustomValidty(validateError.message);\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n      if (!isEmptyObject(validationResult)) {\n        error[name] = Object.assign({\n          ref: inputRef\n        }, validationResult);\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n  setCustomValidty(true);\n  return error;\n};\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true\n};\nconst isWindowUndefined = typeof window === 'undefined';\nfunction createFormControl(props = {}) {\n  let formOptions = Object.assign(Object.assign({}, defaultOptions), props);\n  let _delayCallback;\n  let _formState = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  };\n  let _fields = {};\n  let _defaultValues = formOptions.defaultValues || {};\n  let _formValues = formOptions.shouldUnregister ? {} : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false\n  };\n  let _timer = 0;\n  let _names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set()\n  };\n  let _validateCount = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  };\n  const _subjects = {\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject()\n  };\n  const validationMode = getValidationModes(formOptions.mode);\n  const reValidateMode = getValidationModes(formOptions.reValidateMode);\n  const isValidateAllFieldCriteria = formOptions.criteriaMode === VALIDATION_MODE.all;\n  const debounce = (callback, wait) => (...args) => {\n    clearTimeout(_timer);\n    _timer = window.setTimeout(() => callback(...args), wait);\n  };\n  const isFieldWatched = name => _names.watchAll || _names.watch.has(name) || _names.watch.has((name.match(/\\w+/) || [])[0]);\n  const updateErrorState = (name, error) => {\n    set(_formState.errors, name, error);\n    _subjects.state.next({\n      errors: _formState.errors\n    });\n  };\n  const shouldRenderBaseOnError = async (shouldSkipRender, name, isValid, error, fieldState) => {\n    const previousError = get(_formState.errors, name);\n    const shouldUpdateValid = _proxyFormState.isValid && _formState.isValid !== isValid;\n    if (props.delayError && error) {\n      _delayCallback = _delayCallback || debounce(updateErrorState, props.delayError);\n      _delayCallback(name, error);\n    } else {\n      clearTimeout(_timer);\n      error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n    }\n    if (((error ? !deepEqual(previousError, error) : previousError) || !isEmptyObject(fieldState) || shouldUpdateValid) && !shouldSkipRender) {\n      const updatedFormState = Object.assign(Object.assign(Object.assign({}, fieldState), shouldUpdateValid ? {\n        isValid\n      } : {}), {\n        errors: _formState.errors,\n        name\n      });\n      _formState = Object.assign(Object.assign({}, _formState), updatedFormState);\n      _subjects.state.next(updatedFormState);\n    }\n    _validateCount[name]--;\n    if (_proxyFormState.isValidating && !_validateCount[name]) {\n      _subjects.state.next({\n        isValidating: false\n      });\n      _validateCount = {};\n    }\n  };\n  const setFieldValue = (name, value, options = {}, shouldRender) => {\n    const field = get(_fields, name);\n    let fieldValue = value;\n    if (field) {\n      const _f = field._f;\n      if (_f) {\n        set(_formValues, name, getFieldValueAs(value, _f));\n        fieldValue = isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(value) ? '' : value;\n        if (isFileInput(_f.ref) && !isString(fieldValue)) {\n          _f.ref.files = fieldValue;\n        } else if (isMultipleSelect(_f.ref)) {\n          [..._f.ref.options].forEach(selectRef => selectRef.selected = fieldValue.includes(selectRef.value));\n        } else if (_f.refs) {\n          if (isCheckBoxInput(_f.ref)) {\n            _f.refs.length > 1 ? _f.refs.forEach(checkboxRef => checkboxRef.checked = Array.isArray(fieldValue) ? !!fieldValue.find(data => data === checkboxRef.value) : fieldValue === checkboxRef.value) : _f.refs[0].checked = !!fieldValue;\n          } else {\n            _f.refs.forEach(radioRef => radioRef.checked = radioRef.value === fieldValue);\n          }\n        } else {\n          _f.ref.value = fieldValue;\n        }\n        if (shouldRender) {\n          _subjects.control.next({\n            values: _formValues,\n            name\n          });\n        }\n      }\n    }\n    (options.shouldDirty || options.shouldTouch) && updateTouchAndDirtyState(name, fieldValue, options.shouldTouch);\n    options.shouldValidate && trigger(name);\n  };\n  const updateTouchAndDirtyState = (name, inputValue, isCurrentTouched, shouldRender = true) => {\n    const state = {\n      name\n    };\n    let isChanged = false;\n    if (_proxyFormState.isDirty) {\n      const previousIsDirty = _formState.isDirty;\n      _formState.isDirty = _getIsDirty();\n      state.isDirty = _formState.isDirty;\n      isChanged = previousIsDirty !== state.isDirty;\n    }\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldDirty = !deepEqual(get(_defaultValues, name), inputValue);\n      isCurrentFieldDirty ? set(_formState.dirtyFields, name, true) : unset(_formState.dirtyFields, name);\n      state.dirtyFields = _formState.dirtyFields;\n      isChanged = isChanged || isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields, name, isCurrentTouched);\n      state.touchedFields = _formState.touchedFields;\n      isChanged = isChanged || _proxyFormState.touchedFields && isPreviousFieldTouched !== isCurrentTouched;\n    }\n    isChanged && shouldRender && _subjects.state.next(state);\n    return isChanged ? state : {};\n  };\n  const executeResolver = async name => {\n    return formOptions.resolver ? await formOptions.resolver(Object.assign({}, _formValues), formOptions.context, getResolverOptions(name || _names.mount, _fields, formOptions.criteriaMode, formOptions.shouldUseNativeValidation)) : {};\n  };\n  const executeResolverValidation = async names => {\n    const {\n      errors\n    } = await executeResolver();\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n    return errors;\n  };\n  const validateForm = async (_fields, shouldCheckValid, context = {\n    valid: true\n  }) => {\n    for (const name in _fields) {\n      const field = _fields[name];\n      if (field) {\n        const _f = field._f;\n        const fieldValue = omit(field, '_f');\n        if (_f) {\n          const fieldError = await validateField(field, get(_formValues, _f.name), isValidateAllFieldCriteria, formOptions.shouldUseNativeValidation);\n          if (fieldError[_f.name]) {\n            context.valid = false;\n            if (shouldCheckValid) {\n              break;\n            }\n          }\n          if (!shouldCheckValid) {\n            fieldError[_f.name] ? set(_formState.errors, _f.name, fieldError[_f.name]) : unset(_formState.errors, _f.name);\n          }\n        }\n        fieldValue && (await validateForm(fieldValue, shouldCheckValid, context));\n      }\n    }\n    return context.valid;\n  };\n  const handleChange = async event => {\n    const target = event.target;\n    let name = target.name;\n    const field = get(_fields, name);\n    if (field) {\n      let error;\n      let isValid;\n      const inputValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      if (isBlurEvent && field._f.onBlur) {\n        field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n      const shouldSkipValidation = !hasValidation(field._f) && !formOptions.resolver && !get(_formState.errors, name) && !field._f.deps || skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, reValidateMode, validationMode);\n      const isWatched = !isBlurEvent && isFieldWatched(name);\n      set(_formValues, name, inputValue);\n      const fieldState = updateTouchAndDirtyState(name, inputValue, isBlurEvent, false);\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n      !isBlurEvent && _subjects.watch.next({\n        name,\n        type: event.type\n      });\n      if (shouldSkipValidation) {\n        return shouldRender && _subjects.state.next(Object.assign({\n          name\n        }, isWatched ? {} : fieldState));\n      }\n      !isBlurEvent && isWatched && _subjects.state.next({});\n      _validateCount[name] = _validateCount[name] ? +1 : 1;\n      _proxyFormState.isValidating && _subjects.state.next({\n        isValidating: true\n      });\n      if (formOptions.resolver) {\n        const {\n          errors\n        } = await executeResolver([name]);\n        error = get(errors, name);\n        if (isCheckBoxInput(target) && !error) {\n          const parentNodeName = getNodeParentName(name);\n          const parentField = get(_fields, parentNodeName);\n          if (Array.isArray(parentField) && parentField.every(field => field._f && isCheckBoxInput(field._f.ref))) {\n            const parentError = get(errors, parentNodeName, {});\n            parentError.type && (error = parentError);\n            name = parentNodeName;\n          }\n        }\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (await validateField(field, get(_formValues, name), isValidateAllFieldCriteria, formOptions.shouldUseNativeValidation))[name];\n        isValid = await _updateValid(true);\n      }\n      if (field._f.deps) {\n        trigger(field._f.deps);\n      }\n      shouldRenderBaseOnError(false, name, isValid, error, fieldState);\n    }\n  };\n  const _updateValidAndInputValue = (name, shouldSkipValueAs, ref) => {\n    const field = get(_fields, name);\n    if (field) {\n      const fieldValue = get(_formValues, name);\n      const defaultValue = isUndefined(fieldValue) ? get(_defaultValues, name) : fieldValue;\n      if (isUndefined(defaultValue) || ref && ref.defaultChecked || shouldSkipValueAs) {\n        set(_formValues, name, shouldSkipValueAs ? defaultValue : getFieldValue(field._f));\n      } else {\n        setFieldValue(name, defaultValue);\n      }\n    }\n    _stateFlags.mount && _updateValid();\n  };\n  const _getIsDirty = (name, data) => {\n    name && data && set(_formValues, name, data);\n    return !deepEqual(Object.assign({}, getValues()), _defaultValues);\n  };\n  const _updateValid = async skipRender => {\n    let isValid = false;\n    if (_proxyFormState.isValid) {\n      isValid = formOptions.resolver ? isEmptyObject((await executeResolver()).errors) : await validateForm(_fields, true);\n      if (!skipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid\n        });\n      }\n    }\n    return isValid;\n  };\n  const setValues = (name, value, options) => Object.entries(value).forEach(([fieldKey, fieldValue]) => {\n    const fieldName = `${name}.${fieldKey}`;\n    const field = get(_fields, fieldName);\n    (_names.array.has(name) || !isPrimitive(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options, true);\n  });\n  const _getWatch = (fieldNames, defaultValue, isMounted, isGlobal) => {\n    const fieldValues = Object.assign({}, isMounted || _stateFlags.mount ? _formValues : isUndefined(defaultValue) ? _defaultValues : isString(fieldNames) ? {\n      [fieldNames]: defaultValue\n    } : defaultValue);\n    if (!fieldNames) {\n      isGlobal && (_names.watchAll = true);\n      return fieldValues;\n    }\n    const result = [];\n    for (const fieldName of convertToArrayPayload(fieldNames)) {\n      isGlobal && _names.watch.add(fieldName);\n      result.push(get(fieldValues, fieldName));\n    }\n    return Array.isArray(fieldNames) ? result : result[0];\n  };\n  const _updateFieldArray = (keyName, name, method, args, values = [], shouldSet = true, shouldSetFields = true) => {\n    let output;\n    _stateFlags.action = true;\n    if (shouldSetFields && get(_fields, name)) {\n      output = method(get(_fields, name), args.argA, args.argB);\n      shouldSet && set(_fields, name, output);\n    }\n    if (Array.isArray(get(_formState.errors, name))) {\n      const output = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSet && set(_formState.errors, name, output);\n      unsetEmptyArray(_formState.errors, name);\n    }\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const output = method(get(_formState.touchedFields, name), args.argA, args.argB);\n      shouldSet && set(_formState.touchedFields, name, output);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      set(_formState.dirtyFields, name, setFieldArrayDirtyFields(omitKey(values, keyName), get(_defaultValues, name, []), get(_formState.dirtyFields, name, [])));\n      values && set(_formState.dirtyFields, name, setFieldArrayDirtyFields(omitKey(values, keyName), get(_defaultValues, name, []), get(_formState.dirtyFields, name, [])));\n      unsetEmptyArray(_formState.dirtyFields, name);\n    }\n    _subjects.state.next({\n      isDirty: _getIsDirty(name, omitKey(values, keyName)),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid\n    });\n  };\n  const _getFieldArrayValue = name => get(_stateFlags.mount ? _formValues : _defaultValues, name, []);\n  const setValue = (name, value, options = {}) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    set(_formValues, name, value);\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues\n      });\n      if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) && options.shouldDirty) {\n        set(_formState.dirtyFields, name, setFieldArrayDirtyFields(value, get(_defaultValues, name, []), get(_formState.dirtyFields, name, [])));\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getIsDirty(name, value)\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value) ? setValues(name, value, options) : setFieldValue(name, value, options, true);\n    }\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name\n    });\n  };\n  const trigger = async (name, options = {}) => {\n    const fieldNames = convertToArrayPayload(name);\n    let isValid;\n    let validationResult;\n    _subjects.state.next({\n      isValidating: true\n    });\n    if (formOptions.resolver) {\n      const schemaResult = await executeResolverValidation(isUndefined(name) ? name : fieldNames);\n      isValid = isEmptyObject(schemaResult);\n      validationResult = name ? !fieldNames.some(name => get(schemaResult, name)) : isValid;\n    } else if (name) {\n      validationResult = (await Promise.all(fieldNames.map(async fieldName => {\n        const field = get(_fields, fieldName);\n        return await validateForm(field && field._f ? {\n          [fieldName]: field\n        } : field);\n      }))).every(Boolean);\n      _updateValid();\n    } else {\n      validationResult = isValid = await validateForm(_fields);\n    }\n    _subjects.state.next(Object.assign(Object.assign({}, isString(name) ? {\n      name\n    } : {}), {\n      errors: _formState.errors,\n      isValid,\n      isValidating: false\n    }));\n    if (options.shouldFocus && !validationResult) {\n      focusFieldBy(_fields, key => get(_formState.errors, key), name ? fieldNames : _names.mount);\n    }\n    return validationResult;\n  };\n  const getValues = fieldNames => {\n    const values = Object.assign(Object.assign({}, _defaultValues), _stateFlags.mount ? _formValues : {});\n    return isUndefined(fieldNames) ? values : isString(fieldNames) ? get(values, fieldNames) : fieldNames.map(name => get(values, name));\n  };\n  const clearErrors = name => {\n    name ? convertToArrayPayload(name).forEach(inputName => unset(_formState.errors, inputName)) : _formState.errors = {};\n    _subjects.state.next({\n      errors: _formState.errors\n    });\n  };\n  const setError = (name, error, options) => {\n    const ref = (get(_fields, name, {\n      _f: {}\n    })._f || {}).ref;\n    set(_formState.errors, name, Object.assign(Object.assign({}, error), {\n      ref\n    }));\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false\n    });\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n  const watch = (fieldName, defaultValue) => isFunction(fieldName) ? _subjects.watch.subscribe({\n    next: info => fieldName(_getWatch(undefined, defaultValue), info)\n  }) : _getWatch(fieldName, defaultValue, false, true);\n  const unregister = (name, options = {}) => {\n    for (const inputName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(inputName);\n      _names.array.delete(inputName);\n      if (get(_fields, inputName)) {\n        if (!options.keepValue) {\n          unset(_fields, inputName);\n          unset(_formValues, inputName);\n        }\n        !options.keepError && unset(_formState.errors, inputName);\n        !options.keepDirty && unset(_formState.dirtyFields, inputName);\n        !options.keepTouched && unset(_formState.touchedFields, inputName);\n        !formOptions.shouldUnregister && !options.keepDefaultValue && unset(_defaultValues, inputName);\n      }\n    }\n    _subjects.watch.next({});\n    _subjects.state.next(Object.assign(Object.assign({}, _formState), !options.keepDirty ? {} : {\n      isDirty: _getIsDirty()\n    }));\n    !options.keepIsValid && _updateValid();\n  };\n  const registerFieldRef = (name, fieldRef, options) => {\n    register(name, options);\n    let field = get(_fields, name);\n    const ref = isUndefined(fieldRef.value) ? fieldRef.querySelectorAll ? fieldRef.querySelectorAll('input,select,textarea')[0] || fieldRef : fieldRef : fieldRef;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    if (ref === field._f.ref || isRadioOrCheckbox && compact(field._f.refs || []).find(option => option === ref)) {\n      return;\n    }\n    field = {\n      _f: isRadioOrCheckbox ? Object.assign(Object.assign({}, field._f), {\n        refs: [...compact(field._f.refs || []).filter(ref => isHTMLElement(ref) && document.contains(ref)), ref],\n        ref: {\n          type: ref.type,\n          name\n        }\n      }) : Object.assign(Object.assign({}, field._f), {\n        ref\n      })\n    };\n    set(_fields, name, field);\n    (!options || !options.disabled) && _updateValidAndInputValue(name, false, ref);\n  };\n  const register = (name, options = {}) => {\n    const field = get(_fields, name);\n    set(_fields, name, {\n      _f: Object.assign(Object.assign(Object.assign({}, field && field._f ? field._f : {\n        ref: {\n          name\n        }\n      }), {\n        name,\n        mount: true\n      }), options)\n    });\n    _names.mount.add(name);\n    if (!isUndefined(options.value)) {\n      set(_formValues, name, options.value);\n    }\n    if (field && isBoolean(options.disabled)) {\n      set(_formValues, name, options.disabled ? undefined : get(_formValues, name, getFieldValue(field._f)));\n    }\n    !field && _updateValidAndInputValue(name, true);\n    return isWindowUndefined ? {\n      name: name\n    } : Object.assign(Object.assign({\n      name\n    }, isBoolean(options.disabled) ? {\n      disabled: options.disabled\n    } : {}), {\n      onChange: handleChange,\n      onBlur: handleChange,\n      ref: ref => {\n        if (ref) {\n          registerFieldRef(name, ref, options);\n        } else {\n          const field = get(_fields, name, {});\n          const _shouldUnregister = formOptions.shouldUnregister || options.shouldUnregister;\n          if (field._f) {\n            field._f.mount = false;\n          }\n          _shouldUnregister && !(isNameInFieldArray(_names.array, name) && _stateFlags.action) && _names.unMount.add(name);\n        }\n      }\n    });\n  };\n  const handleSubmit = (onValid, onInvalid) => async e => {\n    if (e) {\n      e.preventDefault && e.preventDefault();\n      e.persist && e.persist();\n    }\n    let hasNoPromiseError = true;\n    let fieldValues = Object.assign({}, _formValues);\n    _subjects.state.next({\n      isSubmitting: true\n    });\n    try {\n      if (formOptions.resolver) {\n        const {\n          errors,\n          values\n        } = await executeResolver();\n        _formState.errors = errors;\n        fieldValues = values;\n      } else {\n        await validateForm(_fields);\n      }\n      if (isEmptyObject(_formState.errors) && Object.keys(_formState.errors).every(name => get(fieldValues, name))) {\n        _subjects.state.next({\n          errors: {},\n          isSubmitting: true\n        });\n        await onValid(fieldValues, e);\n      } else {\n        onInvalid && (await onInvalid(_formState.errors, e));\n        formOptions.shouldFocusError && focusFieldBy(_fields, key => get(_formState.errors, key), _names.mount);\n      }\n    } catch (err) {\n      hasNoPromiseError = false;\n      throw err;\n    } finally {\n      _formState.isSubmitted = true;\n      _subjects.state.next({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\n        submitCount: _formState.submitCount + 1,\n        errors: _formState.errors\n      });\n    }\n  };\n  const reset = (formValues, keepStateOptions = {}) => {\n    const updatedValues = formValues || _defaultValues;\n    const values = cloneObject(updatedValues);\n    if (!keepStateOptions.keepValues) {\n      _formValues = props.shouldUnregister ? {} : values;\n    }\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of _names.mount) {\n        const field = get(_fields, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form').reset();\n            break;\n          } catch (_a) {}\n        }\n      }\n    }\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = Object.assign({}, updatedValues);\n    }\n    if (!keepStateOptions.keepValues) {\n      _fields = {};\n      _subjects.control.next({\n        values: keepStateOptions.keepDefaultValues ? _defaultValues : Object.assign({}, updatedValues)\n      });\n      _subjects.watch.next({});\n      _subjects.array.next({\n        values\n      });\n    }\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: ''\n    };\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,\n      isDirty: keepStateOptions.keepDirty ? _formState.isDirty : keepStateOptions.keepDefaultValues ? deepEqual(formValues, _defaultValues) : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,\n      dirtyFields: keepStateOptions.keepDirty ? _formState.dirtyFields : {},\n      touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false\n    });\n    _stateFlags.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n  const setFocus = name => get(_fields, name)._f.ref.focus();\n  const _removeFields = () => {\n    for (const name of _names.unMount) {\n      const field = get(_fields, name);\n      field && (field._f.refs ? field._f.refs.every(live) : live(field._f.ref)) && unregister(name);\n    }\n    _names.unMount = new Set();\n  };\n  return {\n    control: {\n      register,\n      unregister,\n      _getWatch,\n      _getIsDirty,\n      _updateValid,\n      _removeFields,\n      _updateFieldArray,\n      _getFieldArrayValue,\n      _subjects,\n      _shouldUnregister: formOptions.shouldUnregister,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      _updateProps: options => {\n        formOptions = Object.assign(Object.assign({}, defaultOptions), options);\n      }\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus\n  };\n}\nfunction useForm(props = {}) {\n  const _formControl = React.useRef();\n  const [formState, updateFormState] = React.useState({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  });\n  if (_formControl.current) {\n    _formControl.current.control._updateProps(props);\n  } else {\n    _formControl.current = Object.assign(Object.assign({}, createFormControl(props)), {\n      formState\n    });\n  }\n  const control = _formControl.current.control;\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: formState => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = Object.assign(Object.assign({}, control._formState), formState);\n        updateFormState(Object.assign({}, control._formState));\n      }\n    }\n  });\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeFields();\n  });\n  _formControl.current.formState = getProxyFormState(formState, control._proxyFormState);\n  return _formControl.current;\n}\nfunction useWatch(props) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled\n  } = props || {};\n  const _name = React.useRef(name);\n  _name.current = name;\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: ({\n      name\n    }) => {\n      if (!_name.current || !name || convertToArrayPayload(_name.current).some(currentName => name && currentName && (name.startsWith(currentName) || currentName.startsWith(name)))) {\n        const result = control._getWatch(_name.current, defaultValue, true);\n        updateValue(isObject(result) ? Object.assign({}, result) : Array.isArray(result) ? [...result] : result);\n      }\n    }\n  });\n  const [value, updateValue] = React.useState(isUndefined(defaultValue) ? control._getWatch(name) : defaultValue);\n  React.useEffect(() => {\n    control._removeFields();\n  });\n  return value;\n}\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };","map":{"version":3,"names":["isCheckBoxInput","element","type","isDateObject","data","Date","isNullOrUndefined","value","isObjectType","isObject","Array","isArray","getControllerValue","event","target","checked","getNodeParentName","name","substring","search","isNameInFieldArray","names","some","current","compact","filter","Boolean","isUndefined","val","undefined","get","obj","path","defaultValue","result","split","reduce","key","EVENTS","BLUR","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","omit","source","copy","Object","assign","FormContext","React","createContext","displayName","useFormContext","useContext","FormProvider","props","createElement","Provider","children","getProxyFormState","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","defineProperty","isEmptyObject","keys","length","shouldRenderFormState","formStateData","find","convertToArrayPayload","useSubscribe","disabled","subject","callback","_subscription","useRef","_unSubscribe","unsubscribe","subscribe","next","useEffect","useFormState","methods","control","updateFormState","useState","_formState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","includes","_subjects","state","useController","shouldUnregister","setInputStateValue","_formValues","_defaultValues","values","registerProps","register","rules","updateMounted","useCallback","field","_fields","_f","mount","_shouldUnregisterField","_shouldUnregister","_names","array","_stateFlags","action","unregister","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","Controller","render","appendErrors","validateAllFieldCriteria","types","isKey","test","stringToPath","input","replace","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","refs","getFocusFieldName","options","shouldFocus","focusName","focusIndex","mapCurrentIds","_fieldIds","keyName","map","output","generateId","d","performance","now","c","r","Math","random","toString","mapIds","append","fillEmptyArray","insert","slice","moveArrayAt","from","to","splice","omitKey","prepend","removeAtIndexes","indexes","i","temp","removeArrayAt","sort","a","b","swapArrayAt","indexA","indexB","updateAt","fieldValues","useFieldArray","setFields","_getFieldArrayValue","fieldArrayName","add","updateValues","updatedFieldArrayValuesWithKey","updatedFieldArrayValues","append$1","appendValue","_updateFieldArray","argA","prepend$1","remove","insert$1","argB","swap","move","update","watchAll","watchField","watch","startsWith","_updateValid","cloneObject","Set","isPrimitive","deepEqual","object1","object2","keys1","keys2","val1","val2","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isBoolean","isFileInput","isFunction","isHTMLElement","HTMLElement","isMultipleSelect","isRadioInput","isRadioOrCheckboxFunction","isString","isWeb","window","document","live","contains","Subscription","constructor","tearDowns","tearDown","push","teardown","Subscriber","observer","subscription","closed","Subject","observers","subscriber","baseGet","updatePath","unset","childObject","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","defaultResult","validResult","getCheckboxValue","option","attributes","getFieldValueAs","valueAsNumber","valueAsDate","setValueAs","NaN","getMultipleSelectValue","selected","defaultReturn","getRadioValue","previous","getFieldValue","every","files","getResolverOptions","criteriaMode","shouldUseNativeValidation","hasValidation","deepMerge","targetValue","sourceValue","_a","setDirtyFields","defaultValues","parentNode","parentName","setFieldArrayDirtyFields","skipValidation","isBlurEvent","isSubmitted","reValidateMode","unsetEmptyArray","isMessage","isValidElement","isRegex","RegExp","getValidateError","getValueAndMessage","validationData","validateField","inputValue","inputRef","setCustomValidty","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","parseFloat","valueDate","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","isWindowUndefined","createFormControl","formOptions","_delayCallback","submitCount","isSubmitting","isSubmitSuccessful","_timer","unMount","_validateCount","validationMode","isValidateAllFieldCriteria","debounce","wait","args","clearTimeout","setTimeout","isFieldWatched","has","updateErrorState","shouldRenderBaseOnError","shouldSkipRender","previousError","shouldUpdateValid","delayError","updatedFormState","setFieldValue","shouldRender","fieldValue","forEach","selectRef","checkboxRef","radioRef","shouldDirty","shouldTouch","updateTouchAndDirtyState","shouldValidate","trigger","isCurrentTouched","isChanged","previousIsDirty","_getIsDirty","isPreviousFieldDirty","isCurrentFieldDirty","isPreviousFieldTouched","executeResolver","resolver","context","executeResolverValidation","validateForm","shouldCheckValid","valid","fieldError","handleChange","shouldSkipValidation","deps","isWatched","parentNodeName","parentField","parentError","_updateValidAndInputValue","shouldSkipValueAs","defaultChecked","getValues","skipRender","setValues","entries","fieldKey","fieldName","_getWatch","fieldNames","isMounted","isGlobal","method","shouldSet","shouldSetFields","setValue","isFieldArray","schemaResult","Promise","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","registerFieldRef","fieldRef","querySelectorAll","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","reset","formValues","keepStateOptions","updatedValues","keepValues","closest","keepDefaultValues","keepSubmitCount","keepIsSubmitted","keepErrors","setFocus","_removeFields","_updateProps","useForm","_formControl","useWatch","currentName","updateValue"],"sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getControllerValue.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/useSubscribe.ts","../src/useFormState.ts","../src/useController.ts","../src/controller.tsx","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFocusFieldName.ts","../src/logic/mapCurrentIds.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/omitKeys.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/update.ts","../src/useFieldArray.ts","../src/utils/cloneObject.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/getValidationModes.ts","../src/utils/isBoolean.ts","../src/utils/isFileInput.ts","../src/utils/isFunction.ts","../src/utils/isHTMLElement.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/utils/isRadioOrCheckbox.ts","../src/utils/isString.ts","../src/utils/isWeb.ts","../src/utils/live.ts","../src/utils/Subject.ts","../src/utils/unset.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getMultipleSelectValue.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/getResolverOptions.ts","../src/logic/hasValidation.ts","../src/utils/deepMerge.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/logic/skipValidation.ts","../src/logic/unsetEmptyArray.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/logic/createFormControl.ts","../src/useForm.ts","../src/useWatch.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T extends unknown>(\n  obj: T,\n  path: string,\n  defaultValue?: unknown,\n) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(FormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <FormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","import * as React from 'react';\n\nimport { SubjectType, TearDown } from './utils/Subject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject?: SubjectType<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>({ disabled, subject, callback }: Props<T>) {\n  const _subscription = React.useRef(subject);\n  const _unSubscribe = React.useRef<{ unsubscribe: TearDown }>();\n\n  if (disabled) {\n    if (_subscription.current) {\n      _unSubscribe.current && _unSubscribe.current.unsubscribe();\n      _subscription.current = _unSubscribe.current = undefined;\n    }\n  } else {\n    if (!_subscription.current) {\n      _subscription.current = subject;\n    }\n\n    if (!_unSubscribe.current && _subscription.current) {\n      _unSubscribe.current = _subscription.current.subscribe({\n        next: callback,\n      });\n    }\n  }\n\n  React.useEffect(\n    () => () => {\n      _unSubscribe.current && _unSubscribe.current.unsubscribe();\n    },\n    [],\n  );\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport {\n  FieldValues,\n  Path,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (formState) =>\n      (!_name.current ||\n        !formState.name ||\n        convertToArrayPayload(_name.current).includes(\n          formState.name as Path<TFieldValues>,\n        )) &&\n      shouldRenderFormState(formState, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...formState,\n      }),\n    subject: control._subjects.state,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const [value, setInputStateValue] = React.useState(\n    get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n  const _name = React.useRef(name);\n  _name.current = name;\n\n  useSubscribe({\n    subject: control._subjects.control,\n    callback: (data) =>\n      (!data.name || _name.current === data.name) &&\n      setInputStateValue(get(data.values, name)),\n  });\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  const updateMounted = React.useCallback(\n    (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    },\n    [control],\n  );\n\n  React.useEffect(() => {\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._shouldUnregister || shouldUnregister;\n\n      if (\n        isNameInFieldArray(control._names.array, name)\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister, updateMounted]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        registerProps.onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import * as React from 'react';\n\nimport { FieldValues } from '../types';\n\nexport default <T, K>(\n  values: T[],\n  _fieldIds: React.MutableRefObject<K>,\n  keyName: string,\n) =>\n  values.map((value, index) => {\n    const output = _fieldIds.current[index as keyof K];\n\n    return {\n      ...value,\n      ...(output ? { [keyName]: (output as FieldValues)[keyName] } : {}),\n    };\n  });\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayPath, FieldArrayWithId, FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TFieldName extends FieldArrayPath<TFieldArrayValues> = FieldArrayPath<TFieldArrayValues>,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[] =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    ...(value[keyName] ? {} : { [keyName]: generateId() }),\n    ...value,\n  })) as Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[];\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: any) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport mapCurrentIds from './logic/mapCurrentIds';\nimport mapIds from './logic/mapId';\nimport appendAt from './utils/append';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport omitKeys from './utils/omitKeys';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(mapIds(control._getFieldArrayValue(name), keyName));\n  const _fieldIds = React.useRef(fields);\n\n  useSubscribe({\n    callback: ({ values, name: fieldArrayName }) => {\n      if (fieldArrayName === name || !fieldArrayName) {\n        setFields(mapIds(get(values, name), keyName));\n      }\n    },\n    subject: control._subjects.array,\n  });\n\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValuesWithKey: T,\n    ) => {\n      const updatedFieldArrayValues = omitKeys(\n        updatedFieldArrayValuesWithKey,\n        keyName,\n      );\n      set(control._formValues, name, updatedFieldArrayValues);\n      setFields(updatedFieldArrayValuesWithKey);\n      return updatedFieldArrayValues;\n    },\n    [control, name, keyName],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = appendAt(\n      mapCurrentIds(control._getFieldArrayValue(name), _fieldIds, keyName),\n      mapIds(appendValue, keyName),\n    );\n    control._updateFieldArray(\n      keyName,\n      name,\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValuesWithKey.length - appendValue.length,\n      options,\n    );\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = prependAt(\n      mapCurrentIds(control._getFieldArrayValue(name), _fieldIds, keyName),\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      keyName,\n      name,\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(\n      mapCurrentIds(control._getFieldArrayValue(name), _fieldIds, keyName),\n      index,\n    );\n    control._updateFieldArray(\n      keyName,\n      name,\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = insertAt(\n      mapCurrentIds(control._getFieldArrayValue(name), _fieldIds, keyName),\n      index,\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      keyName,\n      name,\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArrayValue(name),\n      _fieldIds,\n      keyName,\n    );\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    control._updateFieldArray(\n      keyName,\n      name,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArrayValue(name),\n      _fieldIds,\n      keyName,\n    );\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    control._updateFieldArray(\n      keyName,\n      name,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArrayValue(name),\n      _fieldIds,\n      keyName,\n    );\n    const updatedFieldArrayValues = updateAt(\n      updatedFieldArrayValuesWithKey,\n      index,\n      value,\n    );\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n    control._updateFieldArray(\n      keyName,\n      name,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      updateValues(_fieldIds.current),\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = mapIds(convertToArrayPayload(value), keyName);\n    control._updateFieldArray(\n      keyName,\n      name,\n      () => updatedFieldArrayValuesWithKey,\n      {},\n      updateValues(updatedFieldArrayValuesWithKey),\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    if (control._names.watchAll) {\n      control._subjects.state.next({});\n    } else {\n      for (const watchField of control._names.watch) {\n        if (name.startsWith(watchField)) {\n          control._subjects.state.next({});\n          break;\n        }\n      }\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n\n    return () => {\n      if (control._shouldUnregister || shouldUnregister) {\n        control.unregister(name as FieldPath<TFieldValues>);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend, [updateValues, name, control, keyName]),\n    append: React.useCallback(append, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","import isObject from './isObject';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    isDateObject(object1) ||\n    isDateObject(object2)\n  ) {\n    return object1 === object2;\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || Array.isArray(val1)) &&\n        (isObject(val2) || Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => !isHTMLElement(ref) || !document.contains(ref);\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n  unsubscribe: () => void;\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return getMultipleSelectValue(ref.options);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(_fields, name) as Field;\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  RegisterOptions,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport omitKey from '../utils/omitKeys';\nimport Subject from '../utils/Subject';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getNodeParentName from './getNodeParentName';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let formOptions = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _delayCallback: DelayCallback;\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = formOptions.defaultValues || {};\n  let _formValues = formOptions.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _timer = 0;\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let _validateCount: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject(),\n  };\n\n  const validationMode = getValidationModes(formOptions.mode);\n  const reValidateMode = getValidationModes(formOptions.reValidateMode);\n  const isValidateAllFieldCriteria =\n    formOptions.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(_timer);\n      _timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    _names.watchAll ||\n    _names.watch.has(name) ||\n    _names.watch.has((name.match(/\\w+/) || [])[0]);\n\n  const updateErrorState = (name: InternalFieldName, error: FieldError) => {\n    set(_formState.errors, name, error);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const shouldRenderBaseOnError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      _delayCallback =\n        _delayCallback || debounce(updateErrorState, props.delayError);\n\n      _delayCallback(name, error);\n    } else {\n      clearTimeout(_timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousError, error) : previousError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    _validateCount[name]--;\n\n    if (_proxyFormState.isValidating && !_validateCount[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      _validateCount = {};\n    }\n  };\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n    shouldRender?: boolean,\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const _f = field._f;\n\n      if (_f) {\n        set(_formValues, name, getFieldValueAs(value, _f));\n\n        fieldValue =\n          isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(_f.ref) && !isString(fieldValue)) {\n          _f.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(_f.ref)) {\n          [..._f.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (_f.refs) {\n          if (isCheckBoxInput(_f.ref)) {\n            _f.refs.length > 1\n              ? _f.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (_f.refs[0].checked = !!fieldValue);\n          } else {\n            _f.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          _f.ref.value = fieldValue;\n        }\n\n        if (shouldRender) {\n          _subjects.control.next({\n            values: _formValues,\n            name,\n          });\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirtyState(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const updateTouchAndDirtyState = (\n    name: InternalFieldName,\n    inputValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    const state: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    let isChanged = false;\n\n    if (_proxyFormState.isDirty) {\n      const previousIsDirty = _formState.isDirty;\n      _formState.isDirty = _getIsDirty();\n      state.isDirty = _formState.isDirty;\n      isChanged = previousIsDirty !== state.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldDirty = !deepEqual(\n        get(_defaultValues, name),\n        inputValue,\n      );\n      isCurrentFieldDirty\n        ? set(_formState.dirtyFields as TFieldValues, name, true)\n        : unset(_formState.dirtyFields, name);\n      state.dirtyFields = _formState.dirtyFields;\n      isChanged =\n        isChanged || isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      state.touchedFields = _formState.touchedFields;\n      isChanged =\n        isChanged ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isChanged && shouldRender && _subjects.state.next(state);\n\n    return isChanged ? state : {};\n  };\n\n  const executeResolver = async (name?: InternalFieldName[]) => {\n    return formOptions.resolver\n      ? await formOptions.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          formOptions.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            formOptions.criteriaMode,\n            formOptions.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n  };\n\n  const executeResolverValidation = async (names?: InternalFieldName[]) => {\n    const { errors } = await executeResolver();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const validateForm = async (\n    _fields: FieldRefs,\n    shouldCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in _fields) {\n      const field = _fields[name];\n\n      if (field) {\n        const _f = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, _f.name),\n            isValidateAllFieldCriteria,\n            formOptions.shouldUseNativeValidation,\n          );\n\n          if (fieldError[_f.name]) {\n            context.valid = false;\n\n            if (shouldCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldCheckValid) {\n            fieldError[_f.name]\n              ? set(_formState.errors, _f.name, fieldError[_f.name])\n              : unset(_formState.errors, _f.name);\n          }\n        }\n\n        fieldValue &&\n          (await validateForm(fieldValue, shouldCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const inputValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n\n      if (isBlurEvent && field._f.onBlur) {\n        field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !formOptions.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          reValidateMode,\n          validationMode,\n        );\n      const isWatched = !isBlurEvent && isFieldWatched(name);\n\n      set(_formValues, name, inputValue);\n\n      const fieldState = updateTouchAndDirtyState(\n        name,\n        inputValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      _validateCount[name] = _validateCount[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (formOptions.resolver) {\n        const { errors } = await executeResolver([name]);\n        error = get(errors, name);\n\n        if (isCheckBoxInput(target) && !error) {\n          const parentNodeName = getNodeParentName(name);\n          const parentField = get(_fields, parentNodeName);\n\n          if (\n            Array.isArray(parentField) &&\n            parentField.every(\n              (field: Field) => field._f && isCheckBoxInput(field._f.ref),\n            )\n          ) {\n            const parentError = get(errors, parentNodeName, {});\n            parentError.type && (error = parentError);\n            name = parentNodeName;\n          }\n        }\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            isValidateAllFieldCriteria,\n            formOptions.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      if (field._f.deps) {\n        trigger(field._f.deps as FieldPath<TFieldValues>[]);\n      }\n\n      shouldRenderBaseOnError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const _updateValidAndInputValue = (\n    name: InternalFieldName,\n    shouldSkipValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field = get(_fields, name) as Field;\n\n    if (field) {\n      const fieldValue = get(_formValues, name);\n      const defaultValue = isUndefined(fieldValue)\n        ? get(_defaultValues, name)\n        : fieldValue;\n\n      if (\n        isUndefined(defaultValue) ||\n        (ref && (ref as HTMLInputElement).defaultChecked) ||\n        shouldSkipValueAs\n      ) {\n        set(\n          _formValues,\n          name,\n          shouldSkipValueAs ? defaultValue : getFieldValue(field._f),\n        );\n      } else {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const _getIsDirty: GetIsDirty = (name, data) => {\n    name && data && set(_formValues, name, data);\n\n    return !deepEqual({ ...getValues() }, _defaultValues);\n  };\n\n  const _updateValid = async (skipRender?: boolean) => {\n    let isValid = false;\n    if (_proxyFormState.isValid) {\n      isValid = formOptions.resolver\n        ? isEmptyObject((await executeResolver()).errors)\n        : await validateForm(_fields, true);\n\n      if (!skipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n    return isValid;\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) =>\n    Object.entries(value).forEach(([fieldKey, fieldValue]) => {\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(\n            fieldName,\n            fieldValue as SetFieldValue<TFieldValues>,\n            options,\n          )\n        : setFieldValue(\n            fieldName,\n            fieldValue as SetFieldValue<TFieldValues>,\n            options,\n            true,\n          );\n    });\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    fieldNames,\n    defaultValue,\n    isMounted,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(isMounted || _stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(fieldNames)\n        ? { [fieldNames]: defaultValue }\n        : defaultValue),\n    };\n\n    if (!fieldNames) {\n      isGlobal && (_names.watchAll = true);\n      return fieldValues;\n    }\n\n    const result = [];\n\n    for (const fieldName of convertToArrayPayload(fieldNames)) {\n      isGlobal && _names.watch.add(fieldName as InternalFieldName);\n      result.push(get(fieldValues, fieldName as InternalFieldName));\n    }\n\n    return Array.isArray(fieldNames) ? result : result[0];\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    keyName,\n    name,\n    method,\n    args,\n    values = [],\n    shouldSet = true,\n    shouldSetFields = true,\n  ) => {\n    let output;\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      output = method(get(_fields, name), args.argA, args.argB);\n      shouldSet && set(_fields, name, output);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const output = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSet && set(_formState.errors, name, output);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const output = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(_formState.touchedFields as TFieldValues, name, output);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      set(\n        _formState.dirtyFields as TFieldValues,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(values, keyName),\n          get(_defaultValues, name, []),\n          get(_formState.dirtyFields, name, []),\n        ),\n      );\n      values &&\n        set(\n          _formState.dirtyFields as TFieldValues,\n          name,\n          setFieldArrayDirtyFields(\n            omitKey(values, keyName),\n            get(_defaultValues, name, []),\n            get(_formState.dirtyFields, name, []),\n          ),\n        );\n      unsetEmptyArray(_formState.dirtyFields, name);\n    }\n\n    _subjects.state.next({\n      isDirty: _getIsDirty(name, omitKey(values, keyName)),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const _getFieldArrayValue = (name: InternalFieldName) =>\n    get(_stateFlags.mount ? _formValues : _defaultValues, name, []);\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          _formState.dirtyFields as TFieldValues,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(_defaultValues, name, []),\n            get(_formState.dirtyFields, name, []),\n          ),\n        );\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getIsDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n    let isValid;\n    let validationResult;\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (formOptions.resolver) {\n      const schemaResult = await executeResolverValidation(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(schemaResult);\n      validationResult = name\n        ? !fieldNames.some((name) => get(schemaResult, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await validateForm(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      _updateValid();\n    } else {\n      validationResult = isValid = await validateForm(_fields);\n    }\n\n    _subjects.state.next({\n      ...(isString(name) ? { name } : {}),\n      errors: _formState.errors,\n      isValid,\n      isValidating: false,\n    });\n\n    if (options.shouldFocus && !validationResult) {\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n    }\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            fieldName(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          fieldName as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          false,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(inputName);\n      _names.array.delete(inputName);\n\n      if (get(_fields, inputName)) {\n        if (!options.keepValue) {\n          unset(_fields, inputName);\n          unset(_formValues, inputName);\n        }\n\n        !options.keepError && unset(_formState.errors, inputName);\n        !options.keepDirty && unset(_formState.dirtyFields, inputName);\n        !options.keepTouched && unset(_formState.touchedFields, inputName);\n        !formOptions.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, inputName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getIsDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    fieldRef: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field: Field = get(_fields, name);\n    const ref = isUndefined(fieldRef.value)\n      ? fieldRef.querySelectorAll\n        ? (fieldRef.querySelectorAll('input,select,textarea')[0] as Ref) ||\n          fieldRef\n        : fieldRef\n      : fieldRef;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isRadioOrCheckbox &&\n        compact(field._f.refs || []).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(_fields, name, field);\n\n    (!options || !options.disabled) &&\n      _updateValidAndInputValue(name, false, ref);\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    if (!isUndefined(options.value)) {\n      set(_formValues, name, options.value);\n    }\n\n    if (field && isBoolean(options.disabled)) {\n      set(\n        _formValues,\n        name,\n        options.disabled\n          ? undefined\n          : get(_formValues, name, getFieldValue(field._f)),\n      );\n    }\n\n    !field && _updateValidAndInputValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              registerFieldRef(name, ref, options);\n            } else {\n              const field = get(_fields, name, {}) as Field;\n              const _shouldUnregister =\n                formOptions.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              _shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (formOptions.resolver) {\n          const { errors, values } = await executeResolver();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await validateForm(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          formOptions.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const values = cloneObject(updatedValues);\n\n    if (!keepStateOptions.keepValues) {\n      _formValues = props.shouldUnregister ? {} : values;\n    }\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of _names.mount) {\n        const field = get(_fields, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form')!.reset();\n            break;\n          } catch {}\n        }\n      }\n    }\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = { ...updatedValues };\n    }\n\n    if (!keepStateOptions.keepValues) {\n      _fields = {};\n\n      _subjects.control.next({\n        values: keepStateOptions.keepDefaultValues\n          ? _defaultValues\n          : { ...updatedValues },\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(_fields, name)._f.ref.focus();\n\n  const _removeFields = () => {\n    for (const name of _names.unMount) {\n      const field = get(_fields, name) as Field;\n\n      field &&\n        (field._f.refs ? field._f.refs.every(live) : live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _getWatch,\n      _getIsDirty,\n      _updateValid,\n      _removeFields,\n      _updateFieldArray,\n      _getFieldArrayValue,\n      _subjects,\n      _shouldUnregister: formOptions.shouldUnregister,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      _updateProps: (options) => {\n        formOptions = { ...defaultOptions, ...options };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._updateProps(props);\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (formState) => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...formState,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeFields();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n","import * as React from 'react';\n\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isObject from './utils/isObject';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartial,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): UnpackNestedValue<DeepPartial<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n  } = props || {};\n  const _name = React.useRef(name);\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: ({ name }) => {\n      if (\n        !_name.current ||\n        !name ||\n        convertToArrayPayload(_name.current).some(\n          (currentName) =>\n            name &&\n            currentName &&\n            (name.startsWith(currentName as InternalFieldName) ||\n              currentName.startsWith(name as InternalFieldName)),\n        )\n      ) {\n        const result = control._getWatch(\n          _name.current as InternalFieldName,\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n        updateValue(\n          isObject(result)\n            ? { ...result }\n            : Array.isArray(result)\n            ? [...result]\n            : result,\n        );\n      }\n    },\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeFields();\n  });\n\n  return value;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}